// Code generated by protoc-gen-go. DO NOT EDIT.
// source: papa.proto

package papa

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PapaTask struct {
	Id                   uint64   `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PapaTask) Reset()         { *m = PapaTask{} }
func (m *PapaTask) String() string { return proto.CompactTextString(m) }
func (*PapaTask) ProtoMessage()    {}
func (*PapaTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_papa_84c20a5f290fc159, []int{0}
}
func (m *PapaTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PapaTask.Unmarshal(m, b)
}
func (m *PapaTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PapaTask.Marshal(b, m, deterministic)
}
func (dst *PapaTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PapaTask.Merge(dst, src)
}
func (m *PapaTask) XXX_Size() int {
	return xxx_messageInfo_PapaTask.Size(m)
}
func (m *PapaTask) XXX_DiscardUnknown() {
	xxx_messageInfo_PapaTask.DiscardUnknown(m)
}

var xxx_messageInfo_PapaTask proto.InternalMessageInfo

func (m *PapaTask) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PapaTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*PapaTask)(nil), "papa.PapaTask")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PapaClient is the client API for Papa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PapaClient interface {
	Pull(ctx context.Context, opts ...grpc.CallOption) (Papa_PullClient, error)
}

type papaClient struct {
	cc *grpc.ClientConn
}

func NewPapaClient(cc *grpc.ClientConn) PapaClient {
	return &papaClient{cc}
}

func (c *papaClient) Pull(ctx context.Context, opts ...grpc.CallOption) (Papa_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Papa_serviceDesc.Streams[0], "/papa.Papa/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &papaPullClient{stream}
	return x, nil
}

type Papa_PullClient interface {
	Send(*PapaTask) error
	Recv() (*PapaTask, error)
	grpc.ClientStream
}

type papaPullClient struct {
	grpc.ClientStream
}

func (x *papaPullClient) Send(m *PapaTask) error {
	return x.ClientStream.SendMsg(m)
}

func (x *papaPullClient) Recv() (*PapaTask, error) {
	m := new(PapaTask)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PapaServer is the server API for Papa service.
type PapaServer interface {
	Pull(Papa_PullServer) error
}

func RegisterPapaServer(s *grpc.Server, srv PapaServer) {
	s.RegisterService(&_Papa_serviceDesc, srv)
}

func _Papa_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PapaServer).Pull(&papaPullServer{stream})
}

type Papa_PullServer interface {
	Send(*PapaTask) error
	Recv() (*PapaTask, error)
	grpc.ServerStream
}

type papaPullServer struct {
	grpc.ServerStream
}

func (x *papaPullServer) Send(m *PapaTask) error {
	return x.ServerStream.SendMsg(m)
}

func (x *papaPullServer) Recv() (*PapaTask, error) {
	m := new(PapaTask)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Papa_serviceDesc = grpc.ServiceDesc{
	ServiceName: "papa.Papa",
	HandlerType: (*PapaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _Papa_Pull_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "papa.proto",
}

func init() { proto.RegisterFile("papa.proto", fileDescriptor_papa_84c20a5f290fc159) }

var fileDescriptor_papa_84c20a5f290fc159 = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x48, 0x2c, 0x48,
	0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xf4, 0xb8, 0x38, 0x02, 0x12,
	0x0b, 0x12, 0x43, 0x12, 0x8b, 0xb3, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18,
	0x35, 0xd8, 0x82, 0x98, 0x32, 0x53, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98,
	0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x23, 0x23, 0x2e, 0x16, 0x90, 0x7a, 0x21, 0x2d, 0x2e,
	0x96, 0x80, 0xd2, 0x9c, 0x1c, 0x21, 0x3e, 0x3d, 0xb0, 0x91, 0x30, 0x33, 0xa4, 0xd0, 0xf8, 0x1a,
	0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x0b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x18, 0x1e,
	0xdf, 0x98, 0x7e, 0x00, 0x00, 0x00,
}
